# -*- coding: utf-8 -*-
"""Cópia de ExClaudinei.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12TNsZB30qsr5OlifYiJGq2Ea1CHTkGeo
"""

import unittest
from datetime import datetime, timedelta


time_entries = []


def validate_time(time_str):
    try:
        datetime.strptime(time_str, "%H:%M")
        return True
    except ValueError:
        return False

def validate_time_format(time_str):
    if len(time_str) == 5 and ":" in time_str:
        return time_str if validate_time(time_str) else None
    elif len(time_str) == 3:
        return f"0{time_str[0]}:{time_str[1:]}" if validate_time(f"0{time_str[0]}:{time_str[1:]}") else None
    elif len(time_str) == 4:
        return f"{time_str[:2]}:{time_str[2:]}" if validate_time(f"{time_str[:2]}:{time_str[2:]}") else None
    return None

def add_time_entry(start, end, break_time):
    start_formatted = validate_time_format(start)
    end_formatted = validate_time_format(end)
    break_formatted = validate_time_format(break_time)

    if start_formatted and end_formatted and break_formatted:
        time_entries.append({
            'start': start_formatted,
            'end': end_formatted,
            'break': break_formatted
        })
    else:
        raise ValueError("Um ou mais horários estão no formato inválido")

def calculate_hours(start, end):
    start_time = datetime.strptime(start, "%H:%M")
    end_time = datetime.strptime(end, "%H:%M")

    if end_time < start_time:
        print(f"Invertendo horários: Início ({start}) e Fim ({end})")
        start_time, end_time = end_time, start_time

    duration = end_time - start_time
    return duration.seconds // 3600

def calculate_hours_with_break(start, end, break_time):
    total_hours = calculate_hours(start, end)
    break_duration = datetime.strptime(break_time, "%H:%M")
    break_in_hours = break_duration.hour + break_duration.minute / 60
    return total_hours - break_in_hours

def show_time_entries():
    print("\nLista de horários inseridos:")
    for entry in time_entries:
        print(f"Inicio: {entry['start']}, Fim: {entry['end']}, Intervalo: {entry['break']}")
        print(f"Horas trabalhadas: {calculate_hours_with_break(entry['start'], entry['end'], entry['break'])} horas\n")

def run_unit_tests():
    print("\nExecutando os testes unitários...\n")
    unittest.main(argv=[''], verbosity=2, exit=False)

def cli_mode():
    while True:
        print("\nEscolha uma opção:")
        print("1. Inserir horários de trabalho")
        print("2. Mostrar horários inseridos")
        print("3. Executar testes unitários")
        print("4. Sair")
        choice = input("Escolha uma opção (1-4): ")

        if choice == '1':
            start_time = input("Insira o horário de início (HH:mm ou HHmm): ")
            end_time = input("Insira o horário de término (HH:mm ou HHmm): ")
            break_time = input("Insira a duração do intervalo (HH:mm ou HHmm): ")
            try:
                add_time_entry(start_time, end_time, break_time)
                print("Horários inseridos com sucesso.")
            except ValueError as e:
                print(f"Erro: {e}")
        elif choice == '2':
            show_time_entries()
        elif choice == '3':
            run_unit_tests()
        elif choice == '4':
            print("Saindo...")
            break
        else:
            print("Escolha inválida. Tente novamente.")

class TestTimeCalculator(unittest.TestCase):

    def test_valid_time_format(self):
        self.assertTrue(validate_time("09:00"))
        self.assertFalse(validate_time("0900"))

    def test_calculate_work_hours(self):
        start_time = "09:00"
        end_time = "17:00"
        self.assertEqual(calculate_hours(start_time, end_time), 8)

    def test_calculate_hours_with_break(self):
        start_time = "09:00"
        end_time = "17:00"
        break_duration = "01:00"
        self.assertEqual(calculate_hours_with_break(start_time, end_time, break_duration), 7)

    def test_time_without_colon(self):
        self.assertEqual(validate_time_format("900"), "09:00")
        self.assertEqual(validate_time_format("0930"), "09:30")
        self.assertIsNone(validate_time_format("99:99"))

    def test_add_time_entry(self):
        add_time_entry("09:00", "17:00", "01:00")
        add_time_entry("08:00", "18:00", "00:30")
        self.assertEqual(len(time_entries), 2)
        self.assertEqual(time_entries[0]['start'], "09:00")
        self.assertEqual(time_entries[0]['end'], "17:00")
        self.assertEqual(time_entries[0]['break'], "01:00")

if __name__ == '__main__':
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == '--test':
        unittest.main(argv=[''], verbosity=2, exit=False)
    else:
        cli_mode()